We have given a new presentation of game semantics based on the theory of traversals. This presentation is concrete in the sense that the traversal denotation carries syntactic information about the term. We established the connection with the Hyland-Ong game semantics by means of a Correspondence Theorem: the set of traversals of a term is isomorphic to the revealed game denotation of the term.

One advantage of the traversal theory lies in its ability to compute beta-reduction locally without having to perform term substitution.
As observed by Danos et al.\ \cite{Danos1996}, ``the interaction processes at work in game semantics are implementations of \emph{linear head reduction}''.
In that regards, the traversals theory can be viewed as a rule-based implementation of the \emph{head linear reduction strategy} \cite{danos-head}. Although the idea of evaluating a term using this strategy is not new, our presentation has several advantages and novelties. Firstly, the Correspondence theorem establishes a clear correspondence with game semantics, namely that traversals gives you a way to compute precisely the revealed game denotation of a term. To our knowledge, although the notion of revealed game semantics was mentioned in previous works \cite{willgreenlandthesis}, it was never formally defined.
Secondly, our presentation highlights more clearly the algorithmic aspect of game semantics. The rule-based definition of traversals lends itself well to automaton characterization. An example is the characterization of higher-order recursion schemes by \emph{collapsible higher-order pushdown automata} \cite{hmos-lics08}.
\smallskip

Another advantage of the traversal theory is its efficiency for effectively computing the game semantic denotations of a term.
The traditional approach is to proceed bottom-up by appealing to compositionality.
Although the compositional nature of game semantics is very attractive from a theoretical point of view, in practice it is not efficient to compute a denotation in that way. Indeed, for every subterm one has to compute all the possible ways to interact with the environment for that subterm. But this denotation is then immediately composed with another subterm, which determines part of the environment's behaviour, thus it was wasteful in the first place to consider all the possible environment's behaviour for the first term.

The traversal theory follows a top-down approach which means that we only consider possible behaviour of the outermost environment.
Moreover contrary to the compositional method, there is no need to implement any composition mechanism: the set of traversals is just obtained by following the traversal rules; hiding of internal nodes is postponed until the end.

The lazy nature of the traversal evaluation provides a further source of efficiency: the beta-redexes are computed ``on-demand'' instead of performing a global substitution.
\smallskip

Last but not least, we believe that the syntactic correspondence between game semantics and its syntax is of pedagogical interest. Game semantics is often found hard to understand due to some obscure technical definitions.
A concrete presentation such as the one given by the traversal theory, allows one to explain game-semantic concepts (such as P-view, innocence, visibility) from a programmer point of view. I have implemented a prototype tool using the F\# programming language, which among other things, illustrates the theory of traversals \cite{Blum2008}. The tool lets the user ``play'' the game induced by a simply-typed term (or a higher-order grammar) by selecting nodes from the computation tree. As the game unfolds the corresponding traversal is shown. A calculator mode allows the user to perform various operations on justified sequences. (Examples from the current chapter were all generated by this tool.)



\subsection*{Further correspondences}
The traversal theory that we have presented here captures the lambda calculus fragment of the game model of call-by-name programming languages such as PCF and Idealized Algol. A natural way to extend this work would be to define the appropriate notion of traversal
corresponding to the call-by-value games \cite{plotkin-75, abramsky98callbyvalue}.

\subsection*{Applications}
There are applications of the theory of traversal in several domains of research:

\subsubsection*{Verification}
As mentioned previously, the theory of traversal was originally introduced by Ong to study the decidability of MSO theories of infinite trees generated by higher-order recursion scheme. 

\todo{Application to the reachability problem.}

\subsubsection*{Automata theory} The traversal theory led to an equi-expressivity result between a certain type of automaton device called \emph{collapsible pushdown automaton} (CPDA) and higher-order recursion schemes (HORS) \cite{hmos-lics08}. One direction of this proof relies on the traversal theory: for a given HORS, a CPDA is constructed that computes precisely the set of traversals over the computation tree of the HORS.

A crucial point which makes this encoding possible is that the structures generated by these devices are of ground type. Such structures cannot interact with their environment which makes their game-semantic denotation very simple: the O-view of the traversal does not play any role in the traversal rules and therefore the automaton does not need to calculate or remember it. A natural extension of this result would be a similar automata-characterization for \emph{higher-order} structures such as simply-typed terms.


\subsubsection*{Pattern matching}
\todo{Colin Stirling's proof of decidability of higher-order matching.}



\todo{Pointer Abstract Machine, Krivine Abstract Machine (Danos).}

\subsubsection*{Analyzing syntactic constraints}

In the context of this thesis, we will be interested in using this theory to analyze the effect of the safety constraints on game models.
This will be the main topic of the next chapter.
