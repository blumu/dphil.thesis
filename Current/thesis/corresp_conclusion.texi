
% Concrete game semantics chapter: Related works and conclusion

The traversal theory gives us a way to compute beta-reduction locally without having to perform any kind of global substitution.
In effect, what the traversal theory does is to reduce the term using the \emph{head linear reduction strategy}\todo{reference}.
Although the idea of evaluating a term using this strategy is not new, we believe that our presentation presents several advantages and novelties.
Firstly, the Correspondence theorem establishes a clear correspondence with game semantics, namely that traversals gives you a way to compute precisely the revealed game denotation of a term. To our knowledge, although the notion of revealed game semantics was mentioned in previous works (\cite{willgreenlandthesis}), it was never formally defined.
Secondly, the traversal theory reveals the algorithmic aspect of game semantics in the sense that the definition of the traversal rules lends itself very well to automaton characterization. This was testified in \cite{hmos-lics08}, where an automata characterization of Higher-order recursion schemes was established using this theory.
\smallskip

Another advantage of the traversal theory is its efficiency for effectively computing the game semantic denotations of a term.
The traditional approach is to proceed bottom-up by appealing to compositionality.
Although the compositional nature of game semantics is very attractive from a theoretical point of view, in practice it is not efficient to compute a denotation in that way. Indeed, for every subterm one has to compute all the possible ways to interact with the environment for that subterm. But this denotation is then immediately composed with another subterm, which determines part of the environment's behaviour, thus it was wasteful in the first place to consider all the possible environment's behaviour for the first term.

The traversal theory follows a top-down approach which means that we only consider possible behaviour of the outermost environment.
Moreover contrary to the compositional method, there is no need to implement any composition mechanism: the set of traversals is just obtained by following the traversal rules; hiding of internal nodes is postponed until the end.

The lazy nature of the traversal evaluation provides a further source of efficiency: the beta-redexes are computed ``on-demand'' instead of performing a global substitution.
\smallskip

Last but not least, we believe that the syntactic correspondence between game semantics and its syntax
is of pedagogical interest. Game semantics is often found hard to understand due to some obscure technical definitions.
A concrete presentation such as the one given by the traversal theory, allows one to explain game-semantic concepts
(such as P-view, innocence, visibility) from a programmer point of view.



\subsection*{Further correspondences}
The traversal theory that we have presented here captures the lambda calculus fragment of the game model of call-by-name programming languages such as PCF and Idealized Algol. A natural way to extend this work would be to define the appropriate notion of traversal
corresponding to the call-by-value games \cite{plotkin-75, abramsky98callbyvalue}.

\subsection*{Application of the theory of traversals}

\notetoself{Ong's work on MSO decidability of infinite trees generated by HORS.}

\notetoself{Automata characterization of recursion scheme: CPDA = HORS, analyzing the effect of safety constraints on the game model (safe lambda calculus), Colin Stirling's proof of decidability of higher-order matching.}


\notetoself{Pointer Abstract Machine, Krivine Abstract Machine (Danos), head linear reduction.}


\subsubsection*{Verification} As mentioned before, the theory of traversals was first applied to the domain of verification of infinite structures by Ong.

\notetoself{Application to the reachability problem.}


\subsubsection*{Automata theory} The traversal theory was also used in \cite{hmos-lics08} to establish an equi-expressivity result between a certain type of automaton device called Collapsible Pushdown Automaton (CPDA) and higher-order recursion schemes (HORS).
One direction of this proof relies on the traversal theory: for a given HORS, a CPDA is constructed that computes precisely the set of traversals over the computation tree of the HORS.
A crucial point which makes this encoding possible is that the structures generated by these devices are of ground type. Such structures cannot interact with their environment which makes their game-semantic denotation very simple: more precisely, the O-view of the traversal does not play any role in the traversal rules and therefore the automaton does not need to keep track of it. A natural question to ask is whether it is possible to find similar automata-characterization for infinite structures of a higher-order.

