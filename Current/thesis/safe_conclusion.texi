\section{Related work}

\subsection*{The safety condition for higher-order grammars}

 We have mentioned the result of Knapik et~al.\ \cite{KNU02} that
 infinite trees generated by \emph{safe higher-order recursion schemes} have
 decidable MSO theories.  A natural question is whether the
 \emph{safety condition} is really necessary.  This has been
 partially answered by Aehlig et~al.\
 \cite{DBLP:conf/tlca/AehligMO05} where it was shown that unrestricted order-$2$ recursion schemes have decidable MSO theories. Concerning word languages, the same authors have shown
 \cite{DBLP:conf/fossacs/AehligMO05} that level $2$ safe higher-order
 grammars are as expressive as (non-deterministic) unsafe ones.  De
 Miranda's thesis \cite{demirandathesis} proposes a unified framework
 for the study of higher-order grammars and gives a detailed analysis
 of the safety constraint at level 2.

 More recently, Ong obtained a more general result and showed
 that the MSO theory of infinite trees generated by higher-order
 grammars of any level, \emph{whether safe or not}, is decidable
 \cite{OngLics2006}.  Using an argument based on innocent
 game semantics, he establishes a correspondence between the
 \emph{computation tree} of a higher-order grammar and the \emph{value tree} that it generates: Paths in the value tree correspond to P-views of traversals of the computation tree.
 Decidability is then obtained by reducing the problem to the acceptance
 of the (annotated) computation tree by a certain alternating parity
 tree automaton.

 The equivalence of \emph{safe} higher-order grammars and higher-order
 deterministic pushdown automata for the purpose of generating
 infinite trees \cite{KNU02} has its counterpart in the general (not
 necessarily safe) case: The paper \cite{hmos-lics08}
 establishes the equivalence of order-$n$ higher-order grammars and
 order-$n$ \emph{collapsible pushdown automata}. Those automata form a
 new kind of pushdown systems in which every stack symbol has a link to
 a stack situated somewhere below it and with an additional stack
 operation whose effect is to ``collapse'' a stack $s$ to the state
 indicated by the link from the top stack symbol. 