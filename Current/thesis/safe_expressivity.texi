\allowdisplaybreaks

\section{Expressivity}
\label{sec:expressivity}
\subsection{Numeric functions representable in the safe lambda
calculus}

Natural numbers can be encoded in the simply typed lambda calculus
using the Church Numerals: each $n\in\nat$ is encoded as the term
$\encode{n} = \lambda s z. s^n z$ of type $I = ((o,o),o,o)$ where
$o$ is a ground type.
We say that a $p$-ary function $f : \nat^p \rightarrow \nat$, for $p \geq 0$,
is represented by a term $F : (I, \ldots, I, I)$ (with $p+1$ occurrences of $I$)
if for all $m_i \in \nat$, $0\leq i\leq p$ we have:
$$F~\encode{m_1} \ldots \encode{m_p} =_\beta \encode{f(m_1,\ldots, m_p)} \enspace .$$
In 1976 Schwichtenberg \cite{citeulike:622637}
showed the following:


\begin{theorem}[Schwichtenberg 1976]
The numeric functions representable by simply typed lambda-terms
of type $I\rightarrow \ldots \rightarrow I$ using the Church Numeral
encoding are exactly the multivariate polynomials \emph{extended
with the conditional function}.
\end{theorem}

If we restrict ourselves to safe terms, the representable functions
are exactly the multivariate polynomials:
\begin{theorem}
\label{thm:polychar} The functions representable by safe
lambda-expressions of type $I\rightarrow \ldots \rightarrow I$
are exactly the multivariate polynomials.
\end{theorem}
\begin{proof}
  Natural numbers are encoded as the Church Numerals: $\encode{n} =
  \lambda s z. s^n z$ for each $n \in\nat$.  Addition: For $n,m \in \nat$, $\encode{n+m} =
  \lambda \alpha^{(o,o)} x^o . (\encode{n} \alpha) (\encode{m} \alpha
  x)$. Multiplication: $\encode{n . m} = \lambda \alpha^{(o,o)}
  . \encode{n} (\encode{m} \alpha)$. These terms are safe and
  clearly any multivariate polynomial $P(n_1, \ldots, n_k)$ can be
  computed by composing the addition and multiplication terms as
  appropriate.

For the converse, let $U$ be a safe lambda-term of type
$I\rightarrow I\rightarrow I$.  The generalization to terms of type
$I^n \rightarrow I$ for every $n\in\nat$ is immediate (they correspond
to polynomials with $n$ variables). By Lemma
\ref{prop:safe_iff_elnfsafe}, safety is preserved by $\eta$-long
normal expansion therefore we can assume that $U$ is in $\eta$-long
normal form.


Let $\mathcal{N}^\tau_\Sigma$ denote the set of safe
$\eta$-long $\beta$-normal terms of type $\tau$ with free variables
in $\Sigma$, and $\mathcal{A}^\tau_\Sigma$ for the set of
$\beta$-normal terms of type $\tau$ with free variables in $\Sigma$
and of the form $\varphi s_1 \ldots s_m$ for some variable
$\varphi:(A_1,\ldots,A_m,o)$ where $m\geq0$ and for all $1\leq i
\leq m$, $s_i \in \mathcal{N}^{A_i}_\Sigma$. Observe that the set
$\mathcal{A}^o_\Sigma$ contains only safe terms but the sets
$\mathcal{A}^\tau_\Sigma$ in general may contain unsafe terms. Let
$\Sigma$ denote the alphabet $\{ x, y : I, z :o, \alpha :
o\rightarrow o \}$. The sets $\mathcal{N}^0_\emptyset$ is given by
the following grammar defined over the set of terminals $\Sigma
\union \{\lambda x y \alpha z. , \lambda z. \}$:
\begin{eqnarray*}
\mathcal{N}^{(I,I,I)}_\emptyset &\rightarrow& \ \lambda x y \alpha z . \mathcal{A}^o_\Sigma \\
\mathcal{A}^o_\Sigma &\rightarrow&\ z \ | \ \mathcal{A}^{(o,o)}_\Sigma \mathcal{A}^o_\Sigma \\
\mathcal{A}^{(o,o)}_\Sigma &\rightarrow&\ \alpha \ |\ \mathcal{A}^I_\Sigma ~\mathcal{N}^{(o,o)}_\Sigma \\
\mathcal{N}^{(o,o)}_\Sigma &\rightarrow& \ \lambda z . \mathcal{A}^{o}_\Sigma \\
\mathcal{A}^I_\Sigma &\rightarrow&\ x \ |\ y \enspace .
\end{eqnarray*}
The key rule is the fourth one: if we had not imposed the safety
constraint the right-hand side would instead be of the form $\lambda
w^o . \mathcal{A}^{(o,o)}_{\Sigma\union\{w:o\}}$. Here the safety
constraint imposes to abstract all the ground type variables
occurring freely, thus only one free variable of ground type can
appear in the term and we can choose it to be named $z$ up to
$\alpha$-conversion.

We extend the notion of representability to terms of type $o$,
$(o,o)$ and $I$ with free variables in $\Sigma$ as follows: A
function $f:\nat^2 \rightarrow \nat$ is represented by a term
$\Sigma \stentail F:o$ if and only if for all $m,n\in\nat$,
$F[\encode{m}, \encode{n}/x,y] =_\beta \alpha^{\overline{f(m,n)}}
z$; by a term $\Sigma \stentail G:(o,o)$ iff $G[\encode{m},
\encode{n}/x,y] =_\beta \lambda z . \alpha^{\overline{f(m,n)}} z$;
and by $\Sigma \stentail H:I$ iff $H[\encode{m}, \encode{n}/x,y]
=_\beta \lambda \alpha z . \alpha^{\overline{f(m,n)}} z$.

We now show by induction on the grammar rules that any term
generated by the grammar represents some polynomial: The term $x$
and $y$ represent the projection functions $(m,n)\mapsto m$ and
$(m,n)\mapsto n$ respectively. The term $\alpha$ and $z$ represent
the constant functions $(m,n)\mapsto 1$ and $(m,n)\mapsto 0$
respectively. If $F\in \mathcal{A}^o_\Sigma$ represents the
functions $f$ then so does $\lambda z. F$.

We make the following observations: let $m, p, p' \geq 0$
\begin{enumerate}
\item ${\overline m} \, (\lambda z.\alpha^p z) =_\beta \lambda z . \alpha^{m \cdot p} z$
\item $(\lambda z.\alpha^p z) (\alpha^{p'} z) =_\beta \alpha^{p + p'} z$.
\end{enumerate}

Now suppose that $F\in \mathcal{A}^I_\Sigma$ and $G\in
\mathcal{N}^{(o,o)}_\Sigma$ represent the functions $f$ and $g$
respectively then by the previous observation, $F G$ represents the
function $f \times g$. And if $F\in \mathcal{A}^{(o,o)}_\Sigma$ and
$G\in \mathcal{N}^o_\Sigma$ represent the functions $f$ and $g$ then
$F G$ represents the function $f+g$.

Thus $U$ represents some polynomial as required: for all $m,n\in
\nat$ we have $U~\encode{m}~\encode{n} =_\beta \lambda \alpha z .
\alpha^{p(m,n)} z$ where $p(m,n) = \sum_{0\leq k \leq d} m^{i_k}
n^{j_k}$ for some $i_k,j_k \geq 0$, $d\geq 0$.
\end{proof}

\begin{corollary}
The conditional operator $C:I\rightarrow I\rightarrow I \rightarrow
I$ satisfying:
$$
C~t~y~z \rightarrow_\beta \left\{
                            \begin{array}{ll}
                              y, & \hbox{if $t
\rightarrow_\beta \encode{0}$\enspace ;} \\
                              z, & \hbox{if
$t \rightarrow_\beta \encode{n+1}$\enspace .}
                            \end{array}
                          \right.
$$
is not definable in the simply typed safe lambda calculus.
\end{corollary}

\begin{example}
The term $\lambda F G H \alpha x . F ( \underline{\lambda y . G
\alpha x} ) (H \alpha x)$ used by Schwichtenberg
\cite{citeulike:622637} to define the conditional operator is unsafe
since the underlined subterm, which is of order $1$, occurs at an
operand position and contains an occurrence of $x$ of order $0$.
\end{example}

\begin{remark} \hfill
\begin{enumerate}
\item This corollary tells us that the conditional function is not
definable when numbers are represented by the Church Numerals.
It may still be possible, however, to represent the conditional
function using a different encoding for natural numbers. A
possible way to compensate for the loss of expressivity caused
by the safety constraint consists in introducing countably many
domains of representation for natural numbers. Such
a technique is used to represent the predecessor function in
the simply typed lambda calculus
\cite{DBLP:journals/jacm/FortuneLO83}.

\item There are other ways to interpret conditional in the lambda calculus. For instance the (unsafe) lambda-term $\lambda t x y . (C\,t\,\encode{0}\, \encode{1}) (\lambda u . \underline{y}) x$ of type $I\rightarrow o\rightarrow o \rightarrow o$ behaves like the conditional operator $C$. It can be shown that there is no such term in the safe lambda calculus simply because the only safe terms of type $I\rightarrow o\rightarrow o \rightarrow o$ up to $\alpha\beta\eta$-equivalence are $\lambda t x y . x$  and $\lambda t x y . y$.

\item The boolean conditional can be represented in the safe
lambda calculus as follows: We encode booleans by terms of type
$B=((o,o),o,o)$. The two truth values are then represented by
$\lambda x^o y^o.x$ and $\lambda x^o y^o.y$ and the conditional by
$\lambda F^B G^B H^B . F~G~H$.

\item It is also possible to define a conditional operator behaving like
the conditional operator $C$ in the second-order lambda calculus
\cite{DBLP:journals/jacm/FortuneLO83}: natural numbers are
represented by terms $\overline{n} \equiv \Lambda t.\lambda
s^{t\typear t} z^t.s^n(z)$ of type $J \equiv \Delta t.(t\typear
t) \typear (t \typear t)$ and the conditional is encoded by the
term $\lambda F^J G^J H^J.F~J~(\lambda u^J . G)~H$. Whether this
term is safe or not cannot be answered just yet as we do not
have a notion of safety for second-order typed terms.
\end{enumerate}
\end{remark}





\newcommand{\zaioncencode}{\underline} % Zaionc's notation for word encoding in the lambda calculus

\newcommand{\zaiwordtyp}{\mathbf{B}} % Zaionc's type for word encoded in the lambda calculus
\newcommand{\closedof}[1]{{\rm Cl}(#1)} % notation for the set of closed terms of a certain type

\newcommand{\openedof}[2]{{\rm Op}(#1,#2)} % notation for the set of open terms M such that \fatlambda{M} in \openedof

\newcommand\wordnum[1]{\mathbf{#1}} % Zaionc's encoding of numbers as words
\newcommand\safedefset{$\lambda^{safe}${\rm def}}

\newcommand\fatlambda{\lambda\kern-0.7em\lambda}
\newcommand\wordapp{{\sf app}}
\newcommand\wordsub{{\sf sub}}


\subsection{Word functions definable in the safe lambda calculus.}
Schwichtenberg's result on numeric functions definable in the lambda
calculus was extended to richer structures: Zaionc studied the
problem for words functions, then functions over trees and
eventually the general case of functions over free algebras
\cite{DBLP:journals/tcs/Leivant93,DBLP:journals/apal/Zaionc91,DBLP:conf/aluacs/Zaionc88,DBLP:journals/tcs/Zaionc87,
zaionc:csl94}. In this section we consider the case of word
functions expressible in the safe lambda calculus.
\smallskip

We consider equality of terms modulo $\alpha$,
$\beta$ and $\eta$ conversion, and we write $M=_{\beta\eta} N$ to
denote this equality. For every simple type $\tau$, we write
$\closedof{\tau}$ for the set of closed terms of type $\tau$ (modulo
$\alpha$, $\beta$ and $\eta$ conversion). We consider a binary
alphabet $\Sigma = \{a,b\}$. The result that we are about to show naturally extends to all
finite alphabets. We consider the set $\Sigma^*$ of all words over
$\Sigma$. The empty word is denoted $\epsilon$. We write $|w|$ to
denote the length of the word $w\in\Sigma^*$. For every $k\in \nat$ we
write $\wordnum{k}$ to denote the word $a \ldots a$ with $k$
occurrences of $a$, so that $|\wordnum{k}| = k$. For every $n\geq 1$
and $k\geq 0$, we write $c(n,k)$ for the $n$-ary function
$(\Sigma^*)^n \rightarrow \Sigma^*$ that maps all inputs to the word
$\wordnum{k}$. The function $\wordapp : (\Sigma^*)^2 \rightarrow
\Sigma^*$ is the usual concatenation function: $\wordapp(x,y)$ is
the word obtain by concatenating $x$ and $y$. The substitution
function $\wordsub : (\Sigma^*)^3 \rightarrow \Sigma^*$ is defined
as follows: $\wordsub(x,y,z)$ is the word obtained from $x$ by
substituting the word $y$ for all occurrences of $a$ and $z$ for all
occurrences of $b$.

Take the type $\zaiwordtyp = (o\typear o)\typear (o\typear o)\typear
o\typear o$, called \index{type!binary word}\emph{the binary word type}
\cite{DBLP:journals/tcs/Zaionc87}. There is a 1-1 correspondence
between words over $\Sigma$ and closed terms of type $\zaiwordtyp$:
The empty word $\epsilon$ is represented by $\lambda u v x.x$, and
if $w\in \Sigma^*$ is represented by a term $W \in
\closedof{\zaiwordtyp}$ then $a \cdot w$ is represented by $\lambda
u v x. u(W uvx)$ and $b \cdot w$ is represented by $\lambda u v x.
v(W uvx)$. The term representing the word $w$ is denoted by
$\zaioncencode{w}$. A closed term of type $\zaiwordtyp^n \typear
\zaiwordtyp$ is called a \defname{word function}. We say that the
function on words $h:(\Sigma^*)^n \rightarrow \Sigma^*$ is
\defname{represented} by the term $H \in \closedof{\zaiwordtyp^n
\typear \zaiwordtyp}$ just if for all $x_1, \ldots, x_n \in
\zaiwordtyp^*$, $H \zaioncencode{x_1} \ldots \zaioncencode{x_n} =
\zaioncencode{h x_1 \ldots x_n}$. \bigskip

Zaionc showed that there exists a finite base of word functions in the sense that every
$\lambda$-definable word function is some composition of functions
from the base \cite{DBLP:journals/tcs/Zaionc87}:
\begin{theorem}[Zaionc \cite{DBLP:journals/tcs/Zaionc87}]
The set of $\lambda$-definable word functions is the minimal set containing the following word functions and closed by composition:
\begin{itemize}
  \item concatenation $\wordapp$;
  \item substitution $\wordsub$;
  \item extraction of the maximal prefix containing only a given letter;
  \item non-emptiness check:  returns $\wordnum{0}$ if the word is $\epsilon$ and $\wordnum{1}$ otherwise, as well as emptiness check;
  \item occurrence checking: returns $\wordnum{1}$ if the word contain an occurrence of a given letter and $\wordnum{0}$ otherwise;
  \item first-occurrence check:  test whether the word begins with a given letter;
  \item all the projections;
  \item all the constant functions.
\end{itemize}
\end{theorem}
The lambda-terms representing the base functions are:
\begin{align*}
  {\rm APP} &\equiv \lambda c d u v x.c u v(d u v x) & {\rm SUB} &\equiv \lambda x d e u v x.c(\lambda y.d u v y)(\lambda y . e u v y) x \\
  {\rm CUT}_a &\equiv \lambda c u v x . c u (\lambda y.x) x & {\rm CUT}_b &\equiv \lambda c u v x . c (\lambda y.x) v x \\
  {\rm SQ} &\equiv \lambda c u v x . c (\lambda y.u x) (\lambda y.u x) x & \overline{{\rm SQ}} &\equiv \lambda c u v x . c (\lambda y.x) (\lambda y.x) (u x) \\
  {\rm BEG}_a &\equiv \lambda c u v x . c (\lambda y.u x) (\lambda y.x) x & {\rm BEG}_b &\equiv \lambda c u v x . c (\lambda y.x) (\lambda y.u x) x \\
  {\rm OCC}_a &\equiv \lambda c u v x . c (\lambda y.u x) (\lambda y.y) x & {\rm OCC}_b &\equiv \lambda c u v x . c (\lambda y.y) (\lambda y.u x) x \enspace .
\end{align*}
where {\rm APP} represents concatenation, {\rm SUB} substitution,
{\rm SQ} and $\overline{{\rm SQ}}$ non-emptiness and emptiness checking, ${\rm BEG}_a$ and
${\rm BEG}_b$ first-occurrence test, and ${\rm OCC}_a$ and ${\rm OCC}_a$ occurrence test.

We observe that among these terms only {\rm APP} and {\rm SUB} are
safe. All the other terms are unsafe because they contain terms of
the form $ N (\lambda y .x)$ where $x$ and $y$ are of the same
order. It turns out that {\rm APP} and {\rm SUB} constitute a base
of terms generating all the functions definable in the safe lambda
calculus as the following theorem states:
\begin{theorem}
\label{thm:wordfunctions_safely_definable}
Let \safedefset\ denote the minimal set containing the following word functions and closed by composition:
\begin{itemize}
  \item concatenation $\wordapp$;
  \item substitution $\wordsub$;
  \item all the projections;
  \item all the constant functions.
\end{itemize}
The set of word-functions definable in the safe lambda calculus is
precisely \safedefset.
\end{theorem}

The proof follows the same steps as Zaionc's proof. The first
direction is immediate: the terms {\rm APP} and {\rm SUB} are safe
and represent concatenation and substitution. Projections are
represented by safe terms of the form $\lambda x_1 \ldots x_n . x_i$
for some $i\in\{1..n\}$, and constant functions by $\lambda x_1
\ldots x_n . \zaioncencode{w}$ for some $w\in\Sigma^*$. For
composition, take a functions $g:(\Sigma^*)^n \rightarrow \Sigma^*$
represented by safe term $G\in \closedof{\zaiwordtyp^n \typear
\zaiwordtyp}$ and functions $f_1,\ldots,f_n : (\Sigma^*)^p
\rightarrow \Sigma^*$ represented by safe terms $F_1,\ldots F_n$
respectively then the function $$(x_1,\cdots,x_p) \mapsto
g(f_1(x_1,\ldots,x_p),\ldots,f_n(x_1,\ldots,x_p))$$ is represented
by the term $\lambda c_1\ldots x_p. G (F_1 c_1 \ldots c_p)\ldots
(F_n c_1 \ldots c_p)$ which is also safe.
\bigskip

To show the other directions we need to introduce some more definitions.
We will write $\openedof{n}{k}$ to denote the set of open terms
of the form:
$$c_1:\zaiwordtyp, \ldots c_n :\zaiwordtyp, u:(o,o), v:(o,o), x_{k-1}:o, \ldots, x_0 :o \stentail M : o \enspace .$$
Thus we have the following equality (modulo $\alpha$, $\beta$ and
$\eta$ conversions) for $n,k\geq1$:
$$\closedof{\tau(n,k)} = \{ \lambda c_1^\zaiwordtyp \ldots c_n^\zaiwordtyp u^{(o,o)} v^{(o,o)} x_{k-1}^o \ldots x_0^o . M \ | \ M \in \openedof{n}{k}  \} $$
writing $\tau(n,k)$ as a shorthand for the type
$(\zaiwordtyp^n,(o,o),(o,o),\overbrace{o,\ldots,o}^{k\hbox{
times}},o)$. We generalized the notion of representability to terms
of type $\tau(n,k)$ as follows:
\begin{definition}[Function pair representation]
A closed term $T\in\closedof{\tau(n,k)}$ \defname{represents the pair of functions}
$(f,p)$ where $f:(\Sigma^*)^n \rightarrow \Sigma^*$ and $p:(\Sigma^*)^n \rightarrow \{\wordnum{0}, \ldots, \wordnum{k-1}\}$ if for all $w_1,\ldots,w_n\in\Sigma^*$
and for every $i\in \{0\ldots,k-1\}$ we have:
$$
T \zaioncencode{w_1} \ldots \zaioncencode{w_n} =_{\beta\eta} \lambda u v x_{k-1}\ldots x_0 . \zaioncencode{f(w_1,\ldots,w_n)} u v x_{|p(w_1,\ldots,w_n)|} \enspace .
$$
By extension we will say that an \emph{open} term $M$ from $\openedof{n}{k}$
represents the pair $(f,p)$
 just if $M[\zaioncencode{w_1}\ldots \zaioncencode{w_n}/c_1\ldots c_n] =_{\beta\eta} \zaioncencode{f(w_1,\ldots,w_n)} u v x_{|p(w_1,\ldots,w_n)|}$.
\end{definition}

We will call \defname[safe!pair]{safe pair} any pair of functions of the form
$(w,c(n,i))$ where $0\leq i\leq k-1$ and $w$ is an $n$-ary function
from \safedefset.

\begin{theorem}[Characterization of the representable pairs]
\label{thm:zaionc_pair_characterization_safe} The function pairs
representable in the safe lambda calculus are precisely the safe
pairs.
\end{theorem}

\begin{proof}
  (Soundness). Take a pair $(w,c(n,i))$ where
  $0\leq i\leq k-1$ and $w$ is an $n$-ary function from \safedefset.
  As observed earlier, all the functions from \safedefset\ are representable
  in the safe lambda calculus: let $\zaioncencode{w}$ be the representative of $w$.
  The pair $(w,c(n,i))$ is then represented by the term
  $ \lambda c_1 \ldots c_n u v x_{k-1} \ldots x_0 . \zaioncencode{w} c_1\ldots c_n u v x_i$.
\smallskip

(Completeness) It suffices to consider safe $\beta$-$\eta$-long
normal terms from $\openedof{n}{k}$ only. The result then
immediately follows for every safe term in $\closedof{\tau(n,k)}$. The
subset of $\openedof{n}{k}$ consisting of $\beta$-$\eta$-long
normal terms is generated by the following grammar \cite{DBLP:journals/tcs/Zaionc87}:
\begin{eqnarray*}
  (\alpha_i^k) &R^k &\rightarrow\ x_i \\
  (\beta^k) && \quad|\  u R^k \\
  (\gamma^k) && \quad|\  v R^k \\
  (\delta^k_j) && \quad|\  c_j\ (\overbrace{\lambda z^k. R^{k+1}[z^k,x_0,\ldots, x_{k-1}/x_0,x_1, \ldots, x_k]}^{Q^k(R^{k+1})}) \\
  && \quad\  \quad \ (\lambda z^k. R^{k+1}[z^k,x_0,\ldots, x_{k-1}/x_0,x_1, \ldots, x_k]) \\
  && \quad\  \quad \ R^k
\end{eqnarray*}
for $k\geq 1$, $0\leq i< k$, $0\leq j\leq n$. The notation
$M[\ldots/\ldots]$ denotes the usual simultaneous substitution. The
name of each rule is given in parenthesis. The non-terminals are
$R^k$ for $k\geq1$ and the set of terminals is $\{ z^k, \lambda z^k
\ |\ k\geq 1\} \union \{ x_i ~| i\geq 0 \} \union \{ c_1, \ldots,
c_n, u, v \}$.

We identify a rule name with the right-hand side of the
corresponding rule, thus $\alpha_i^k$ belongs to $\openedof{n}{k}$,
$\beta^k$ and $\gamma^k$ are functions from $\openedof{n}{k}$ to
$\openedof{n}{k}$, and $\delta^k_j$ is a function from
$\openedof{n}{k+1} \times \openedof{n}{k+1} \times \openedof{n}{k}$
to $\openedof{n}{k}$.

We now want to characterize the subset consisted of all \emph{safe}
terms generated by this grammar. The term $\alpha_i^k$ is always
safe, $\beta^k(M)$ and $\gamma^k(M)$ are safe if and only if $M$ is,
and  $\delta^k_j(F,G,H)$ is safe if and only if $Q^k(F)$, $Q^k(G)$
and $H$ are safe. We observe that the free variables of $Q^k(F)$ all
belong to $\{ c_1, \ldots c_n, u, v, x_0,\ldots x_{k}\}$. All these
variables have order greater than $\ord{z}$ except the $x_i$s which
have same order as $z$. Hence since the $x_i$s are not abstracted
together with $z$ we have that $Q^k(F)$ is safe if and only if $F$
is safe and the variables $x_0\ldots x_k$ do not appear free in
$F[z^k,x_0,\ldots, x_{k-1}/x_0,x_1, \ldots, x_k]$, which is the same
as saying that the variables $x_1\ldots x_k$ do not appear free in
$F$. Similarly, $Q^k(G)$ is safe if and only if $G$ is safe and
variables $x_1\ldots x_k$ do not appear free in $G$.

We therefore need to identify the subclass of terms generated by the non-terminal $R^k$ which are safe and which do not have free occurrences of variables in $\{x_1 \ldots x_{k-1}\}$. By applying this requirement to the rules of the previous grammar we obtain the following specialized grammar characterizing the desired subclass:
\begin{eqnarray*}
  (\overline\alpha_0^k) &\overline R^k &\rightarrow\ x_0 \\
  (\overline\beta^k) && \quad|\  u \overline R^k \\
  (\overline\gamma^k) && \quad|\  v \overline R^k  \\
  (\overline\delta^k_j) && \quad|\  c_j\ (\lambda z^k. \overline R^{k+1}[z^k/x_0]) \ (\lambda z^k. \overline R^{k+1} [z^k/x_0]) \ \overline R^k \enspace .
\end{eqnarray*}
For every term $M$, $Q^k(M)$ is safe if and only if $M$ can be
generated from the non-terminal $\overline R^k$. Thus the subset of
$\closedof{\tau(n,k)}$ consisting of safe beta-normal terms is given
by the grammar:
\begin{eqnarray*}
  (\widetilde\pi^k) &\widetilde S &\rightarrow \lambda c_1 \ldots c_n u v x_{k-1} \ldots x_0 . \widetilde R^k \\
  (\widetilde\alpha_i^k) &\widetilde R^k &\rightarrow\ x_i \\
  (\widetilde\beta^k) && \quad|\  u \widetilde R^k \\
  (\widetilde\gamma^k) && \quad|\  v \widetilde R^k \\
  (\widetilde\delta^k_j) && \quad|\  c_j\ (\lambda z^k. \overline{R^{k+1}}[z^k/x_0]) \ (\lambda z^k. \overline{R^{k+1}}[z^k/x_0]) \ \widetilde R^k \enspace .
\end{eqnarray*}

Thus to conclude the proof, it suffices to show that every term that
can be generated by this grammar starting with the non-terminal
$\widetilde S$ represents a safe pair.

We proceed by induction and show that the non-terminal $\overline
R^k$ generates terms representing pairs of the form $(w,c(n,0))$
while non-terminals $\widetilde S$ and $\widetilde R^k$ generate
terms representing pairs of the form $(w,c(n,i))$ for $0 \leq i<k$
and $w \in$\safedefset.

\emph{Base case:} The term $\overline\alpha_0^k$ represents the safe pair $(c(n,0),c(n,0))$ while
$\widetilde\alpha_i^k$ represents the safe pair
$(c(n,0),c(n,i))$. \emph{Step case:} Suppose $T\in
\openedof{n}{k}$ represents
 a pair $(w,p)$.  Then $\overline\alpha^k(T)$ and
 $\widetilde\alpha^k(T)$ represent the pair
 $(\wordapp(a,w),p)$, $\overline\beta^k(T)$ and
 $\widetilde\beta^k(T)$ represent the pair
 $(\wordapp(b,w),p)$, and $\overline\pi^k(T) \in \closedof{\tau(n,k)}$ represents the pair $(w,p)$. Now suppose that $E$, $F$ and $G$ represent the pairs
 $(w_e,c(n,0))$, $(w_f,c(n,0))$ and $(w_g,c(n,i))$ respectively.
 Then we have:
 \begin{alignat*}{2}
   \widetilde \delta^k_j (E,F,G) &[\zaioncencode{w_1}\ldots \zaioncencode{w_n}/c_1\ldots c_n] \\
   &= \zaioncencode{w_j}\  (\lambda z^k. E[z^k/x_0])[\zaioncencode{w_1}\ldots \zaioncencode{w_n}/c_1\ldots c_n] \\
       & \qquad\quad (\lambda z^k. F[z^k/x_0])[\zaioncencode{w_1}\ldots \zaioncencode{w_n}/c_1\ldots c_n] \\
       & \qquad\quad  G[\zaioncencode{w_1}\ldots \zaioncencode{w_n}/c_1\ldots c_n] \\
   &=_{\beta\eta} \zaioncencode{w_j}\  (\lambda z^k. E[\zaioncencode{w_1}\ldots \zaioncencode{w_n}/c_1\ldots c_n][z^k/x_0]) \\
       & \qquad\qquad (\lambda z^k. F[\zaioncencode{w_1}\ldots \zaioncencode{w_n}/c_1\ldots c_n][z^k/x_0]) \\
       & \qquad\qquad  (\zaioncencode{w_g(w_1\ldots w_n)}~u~v~x_i) \hspace{4cm}\mbox{$G$ represents $(h,c(n,i))$}\\
   &=_{\beta\eta} \zaioncencode{w_j}\  (\lambda z^k. (\zaioncencode{w_e(w_1\ldots w_n)}~u~v~x_0)[z^k/x_0]) \hspace{2cm}\mbox{$E$ represents $(f,c(n,0))$} \\
       & \qquad\qquad (\lambda z^k. (\zaioncencode{w_f(w_1\ldots w_n)}~u~v~x_0)[z^k/x_0]) \hspace{1.8cm}\mbox{$F$ represents $(g,c(n,0))$} \\
       & \qquad\qquad  (\zaioncencode{w_g(w_1\ldots w_n)}~u~v~x_i)\\
%
   &=_{\beta\eta} \zaioncencode{w_j}\  (\lambda z^k. \zaioncencode{w_e(w_1\ldots w_n)}~u~v~z^k) \\
       & \qquad\qquad (\lambda z^k. \zaioncencode{w_f(w_1\ldots w_n)}~u~v~z^k) \\
       & \qquad\qquad (\zaioncencode{w_g(w_1\ldots w_n)}~u~v~x_i)\\
%
   &=_\eta \zaioncencode{w_j}\  (\zaioncencode{w_e(w_1\ldots w_n)}~u~v)  \ (\zaioncencode{w_f(w_1\ldots w_n)}~u~v) \  (\zaioncencode{w_g(w_1\ldots w_n)}~u~v~x_i)\\
%
   &=_{\beta\eta}  \zaioncencode{w}~u~v~ x_i
 \end{alignat*}
where the word-function $w$ is defined as
$$w: w_1,\ldots,w_n \mapsto \wordapp(\wordsub(w_j,w_e(w_1,\ldots,w_n),w_f(w_1,\ldots,w_n)),w_g(x_1,\ldots,w_n)) \enspace .$$
  Hence $\widetilde \delta^k_j (E,F,G)$ represents the pair $(w,c(n,i))$.

  The same argument shows that if $E$, $F$ and $G$ all represent safe pairs
then so does $\overline \delta^k_j (E,F,G)$.
\end{proof}


By instantiating Theorem \ref{thm:zaionc_pair_characterization_safe}
with terms of types $\tau(n,1) = I^n\typear I$ we obtain that every
closed safe term of this type represents some $n$-ary function from
\safedefset. This concludes the proof of the characterization
Theorem \ref{thm:wordfunctions_safely_definable}.


