\subsection{Homogeneous safe lambda calculus}

Our version of the safe lambda calculus does not make any assumption on types. In its original form however---in the setting of higher-order grammars---the safety restriction makes a further assumption on types called \emph{homogeneity}. We recall from Sec.~\ref{subsec:typehomogeneity} that a type $(A_1, \ldots A_n, o)$ is said to be homogeneous whenever $\ord{A_1} \geq \ord{A_2} \geq \ldots \geq \ord{A_n}$ and each of the $A_i$ is homogeneous. As defined in Sec.~\ref{def:safelambda}, the
\emph{homogeneous safe lambda calculus} denotes the restriction of the safe lambda calculus where types occurring in the derivation trees are all homogeneous. We now give a presentation of this calculus by means of a proper system of rules in which type homogeneity is implicitly enforced by the typing rules themselves.

We call \defname{stratified context} any context of the form $x_{11} : A_{11}, \cdots, x_{1r} : A_{1r}, x_{21} : A_{21},\ldots$
such that variables are listed in decreasing order and such that for every $k, l$ and $i>j$, $\ord{x_{ik}} > \ord{x_{jl}}$. In other words, the context is stratified into lists of variables of the same orders, and the stratifications are arranged in strict decreasing order. Such stratified context will be abbreviated as
$$ \overline{x_1}:\overline{A_1} \, | \, \cdots \, | \, \overline{x_n} :  \overline{A_n} \enspace .$$
For every unstratified context $\Gamma$, we write $strat(\Gamma)$ to denote any possible valid stratification of $\Gamma$.

\begin{definition}
\label{dfn:homogsafelmd}
We define typing judgements of the form:
$ \overline{x_1}:\overline{A_1} \, | \, \cdots \, | \, \overline{x_n} :  \overline{A_n} \hentail M : B
$ by induction over the following rules:
$$ \rulename{h\mbox{-}const}  \rulef{}{\hentail f : A}\ f:A \in \Sigma
\qquad
 \rulename{h\mbox{-}var} \rulef{}{\overline{x_1}:\overline{A_1} \, | \, \cdots \, | \, \overline{x_n} :  \overline{A_n} \hentail x_{ij} : A_{ij}}
 \qquad
 \rulename{\delta} \ \rulef{\Gamma \hentail M : A}{\Gamma \hasappentail M : A}
$$

$$ \rulename{h\mbox{-}wk}
    {   \rulef{ \Gamma\hentail M:B \qquad {\Gamma \subset \Delta} }
             { \Delta\hentail M : B}
   }
\qquad
    \rulename{perm}
    {
      \rulef { \Gamma\hentail M:B \qquad \sigma(\Gamma) \hbox{ homogeneous} }
            { \sigma(\Gamma)\hentail M : B }
    }
$$

$$ \rulename{h\mbox{-}app_{as}} \ \rulef{\Gamma \hentail s : (A_1, \ldots , A_n,B)
\quad \Gamma \hentail t_1 : A_1 \quad \ldots
\quad \Gamma \hentail t_n : A_n} {\Gamma \hasappentail s~t_1 \ldots t_n : B} $$

$$ \rulename{h\mbox{-}app_{strat}} \rulef{\Gamma\hentail N_0 : \left(B_{11}, \ldots, B_{1l} \, | \, \overline{B_2} \, | \, \cdots \, | \, \overline{B_m} \, | \, o\right) \quad
\Gamma\hentail N_1 : B_{11} \ \ldots \ \Gamma\hentail N_{l} : B_{1l}}
    { \Gamma\hentail N_0 N_1 \cdots N_{l} : (\overline{B_2} \, | \, \cdots \, | \, \overline{B_m} \, | \, o)} $$

$$ \rulename{h\mbox{-}app_{partial}} \rulef
    {\Gamma\hentail M : \left(B_{11}, \ldots, B_{1l} \, | \, \overline{B_2} \, | \cdots \, | \, \overline{B_m} \, | \, o\right) \quad
    \Gamma\hentail N : B_{11} }
    { \Gamma\hentail M N : (B_{12}, \ldots, B_{1l} \, | \, \overline{B_2} \, | \ \cdots \, | \,
    \overline{B_m} \, | \, o)}
    \ \ \ord{\Gamma} > \ord{B_{11}}
$$

$$\rulename{h\mbox{-}abs}
\rulef{
 {\overline{x_1} : \overline{A_1}\, | \cdots | \,
 \overline{x_{p+1}} : \overline{A_{p+1}} \, | \cdots
 | \overline{x_n} : \overline{A_n}\hasappentail M : B}      }
 { \overline{x_1} : \overline{A_1}\, | \, \cdots\, | \, \overline{x_p} : \overline{A_p}
    \hentail \lambda \overline{x_{p+1}} \ldots \overline{x_n} .M : (\overline{A_{p+1}} \, | \ldots | \, \overline{A_n} \, | \, B)
 } \quad \ord{\overline{A_n}} \geq \ord{B} -1
$$
where $\Delta$ is an homogeneously-typed alphabet, $\Sigma$ is a set of homogeneously-typed constants, and $\sigma$ ranges over permutations on lists of type-assignments.
\end{definition}

The main changes compared to the rules of the non-homogeneous safe lambda calculus are:
\begin{enumerate}[(i)]
\item The contexts are stratified;
\item All the types appearing in the rule are homogeneous;
\item The rule \rulenamet{h\mbox{-}app_{as}} is the counterpart of rule \rulenamet{app_{as}} in the safe lambda calculus: you can form an \emph{homogeneous almost safe term} by applying several safe terms together;
\item The original application rule \rulenamet{app} is split into two rules: \begin{inparaenum} \item \rulenamet{h\mbox{-}app_{strat}} is a ``stratified application''. It applies an entire level of the type stratification. Because of type homogeneity, sufficiently many terms are applied to make the order of the term decrease, so no side-condition is necessary.
    \item \rulenamet{h\mbox{-}app_{partial}} is a partial application: it applies only two terms together provided that some condition on types is verified; \end{inparaenum}

\item Type-homogeneity constrains the order in which the variables are abstracted: in the rule \rulenamet{h\mbox{-}abs}, if a variable of a given order is abstracted then all the lower layers in the stratified context need to be abstracted as well;

\item Because of the previous point and because contexts are stratified, the side-condition present in the rule \rulenamet{abs} of the original safe lambda calculus is always verified and is not required here. Instead the side-condition in \rulenamet{h\mbox{-}abs} ensures that the type $(\overline{A_n}|B)$ is homogeneous.
\end{enumerate}

\begin{lemma}[Basic properties]
\label{lem:homogsafe_basic_prop} Let $\Gamma \hentail M : B$ be a valid judgment then
\begin{enumerate}[(i)]
\item $B$ is homogeneous;
\item $\forall z:A \in \Gamma :\ z \in \freevarset(M) \implies \ord A \geq \ord B$;
\item \emph{(Context reduction)} $\Gamma_M  \hentail M : B$ where $\Gamma_M = \{ z:A \in \Gamma \ | \ z \in \freevarset(M) \}$.
\end{enumerate}
\end{lemma}
\begin{proof}
(i) and (ii) are proved by a trivial induction. (iii) Variables in $\Gamma$ not occurring free
in $M$ are necessarily introduced by the weakening rule. The derivation of
$\Gamma_M \hentail M : A$ can thus be obtained by removing all the unnecessary
applications of the weakening rule from the derivation tree of $\Gamma \hentail M : A$.
\end{proof}

\begin{proposition}
The judgement $strat(\Gamma) \hentail M : T$ (resp.\ $strat(\Gamma) \hasappentail M : T$) is valid if and only if there is a derivation tree for $\Gamma \sentail M : T$ (resp.\ $\Gamma \asappentail M : T$) in the Curry-style safe lambda calculus (Def. \ref{def:safelambda}) such that all the types appearing in the derivation tree are homogeneously-typed.
\end{proposition}
\begin{proof}
\emph{Only if}: The proof is by a trivial structural induction on $\Gamma \hentail M : T$.
\emph{If}: We proceed by structural induction on the derivation tree of $\Gamma \sentail M : T$.
The cases \rulenamet{var}, \rulenamet{const}, \rulenamet{wk} and \rulenamet{app_{as}} are trivial.
Suppose that the rule \rulenamet{app} is used.
Then we can form the equivalent homogeneous term by using the I.H.\ and applying \rulenamet{app_{strat}} several times followed by one application of \rulenamet{app_{partial}}.

Abstraction: The sequent is of the form
$\Gamma \sentail \lambda x_1 \ldots x_n . s :
  (A_1, \ldots ,A_n,B)$ with $\ord\Gamma \geq \ord{(A_1, \ldots ,A_n,B)}$. By the induction hypothesis we have $strat(\Gamma, x_1 : A_1, \ldots, x_n : A_n) \hasappentail s : B$.
  Since we have $\ord\Gamma \geq \ord{(A_1, \ldots ,A_n,B)}$, all the variables in $\Gamma$ have order strictly greater than the variables $x_1, \ldots, x_n$. Therefore there exists a stratification of $\Gamma, x_1, \ldots, x_n$ of the form
  $$ strat(\Gamma)\, |\, \overline{y_1}:\overline{Y_1}\, |
  \cdots |\, \overline{y_l}:\overline{Y_l}$$
  for some $l\geq 1$
  such that the sequence of variables $\overline{y_1}, \ldots, \overline{y_l}$ is equal to $x_1, \ldots, x_n$.  Hence using the permutation rule \rulenamet{perm}
  we can form the judgment
  $$strat(\Gamma)\, |\, \overline{y_1}:\overline{Y_1}\, | \cdots |\, \overline{y_l}:\overline{Y_l} \hasappentail s : B \enspace .$$
  We can now apply the rule \rulenamet{h\mbox{-}abs} to form
  $strat(\Gamma) \hasappentail \lambda x_1 \ldots x_n . s : (A_1, \ldots ,A_n,B)$. The side-condition of the rule is verified because $(A_1, \ldots ,A_n,B)$ is homogeneous by assumption.
\end{proof}


\begin{example} \hfill
\begin{asparaenum}[(i)]
\item The untyped term $(\lambda f x . x) g y $ is homogeneously safe. One possible derivation is:
\begin{mathpar}
\inferrule* [Left=\rulenamet{app_{strat}}]
    {\inferrule* [Left=\rulenamet{wk}]
        {\inferrule* [Left=\rulenamet{app_{strat}}]
            {\inferrule* [Left=\rulenamet{wk}]
                {\inferrule* [Left=\rulenamet{abs}]
                  { \inferrule* [Left=\rulenamet{wk}]{
                      \inferrule* [Left=\rulenamet{abs}]
                        { \inferrule* [Left=\rulenamet{\delta}]
                            {\inferrule* [Left=\rulenamet{var}]{ }{x:o \hentail x : o}}
                            {\hasappentail x : o}
                         }
                        {\hentail \lambda x. x : 1}
                    }
                    {f:(o,o) \hentail \lambda x. x : 1}
                  }
                  {\hentail \lambda f x. x : (1,o,o)}
                }
                {g:(o,o) \hentail \lambda f x. x : (1,o,o)}
            \qquad
             \inferrule* [Right=\rulenamet{var}] { }{g:1 \hentail g : 1} }
            {g:1 \hentail (\lambda f x. x) g : 1}
        }
        { g:1, y:o \hentail (\lambda f x. x) g : 1 }
    \qquad
    \inferrule* [Right=\rulenamet{wk}]
        {\inferrule* [Right=\rulenamet{var}]{ }{y:o \hentail y:o}
        }
        {g:1, y:o \hentail y : o}
    }
    { g:1, y:o \hentail (\lambda f x. x) g y : o}
\end{mathpar}

\item The annotated-terms $\lambda g^{(o,(o,o),o)} x^o . g x$ and
$\lambda g^{(o,(o,o),o)} x^o . g x (\lambda x . x)$ are both safe but not homogeneously safe because they are not homogeneously typed. This shows that the safe lambda calculus strictly contains the homogeneous safe lambda calculus.

\item  The annotated-term $\lambda x^0 f^1 \varphi^2 . \varphi$ is safe but not homogeneously safe because its type $(0,1,2,2)$ is not homogeneous. On the other hand, the untyped term $\lambda x f \varphi . \varphi$ is homogeneously safe
because the annotation $\lambda x^0 f^0 \varphi^0 . \varphi$ is safe and homogeneously typed.
\end{asparaenum}
\end{example}

\begin{example}
Take the following term:
$$ E \equiv  (\lambda a . a (\lambda b . a (\lambda c d .d))) (\lambda e . e (\lambda f .f)) \enspace .$$

(It was used by Sereni \cite{serenistypesct05}
as a counter-example to show that not all simply-typed terms are \emph{size-change terminating} \cite{jones01}.) The untyped term $E$ is \emph{universally safe}. Indeed, let $E' \in \Lambda_{\mathbb{T}}$ be a type-annotation of $E$ (\ie, $|E'| = E$) such that $E'$ is typable in the Church simply-typed lambda calculus.
Then it is easy to check that we have
$$\chentail E' : A \typear A $$
for some type $A \in \mathbb{T}$ (and thus $E$ has for principal type $\alpha \typear \alpha$) and the type assignments for the bound variables in $E'$ are of the form:
\begin{align*}
a & : C \typear A \typear A\\
b & : B \typear B\\
c & : B \typear B\\
d & : A\\
e & : C \equiv (B \typear B) \typear A \typear A\\
f & : B
\end{align*}
for some for some types $A,B \in \mathbb{T}$ (not necessarily atomic).
It is then an easy exercise to check that for every type $A,B\in\mathbb{T}$, we can form the following term-in-context:
$$\sentail E' : A \typear A \enspace .$$

On the other hand, $E$ is only homogeneously safe (and not universally homogeneously safe). More precisely, its annotation $E'$ is \emph{homogeneously} safe if and only if $\ord{B} \geq \ord{A}-1$. Formally:
$$\hentail E' : A \typear A \qquad \iff \qquad \ord{B} \geq \ord{A}-1 \enspace .$$
(In particular, the condition in the right-hand side implies that $A$, $B$ and the types of $a,b,c,d,e,f$ are all homogeneous.)
\end{example}

\emph{Related work:} In her thesis, de Miranda proposed a different notion of safe lambda calculus \cite{demirandathesis}. This notion corresponds to (a less general version of) our notion of \emph{homogeneous} safe lambda calculus: the applicative fragment (\ie, without lambda-abstraction) of de Miranda's typing system coincides with the applicative fragment of the system of Def.~\ref{dfn:homogsafelmd}. In particular a version of Proposition \ref{prop:safegram_safelmd} is shown by de Miranda \cite{demirandathesis}. In the presence of lambda abstraction, however, our system is less restrictive. For instance the judgment $\hentail \lambda f^{(o,o,o)} x^o.  f x : (o,o)$ is derivable in the homogeneous safe lambda calculus but not in the safe lambda calculus \ala de Miranda. One can show that the system introduced by de Miranda is in fact equivalent to the fragment of the \emph{long-safe lambda calculus} (Def.~\ref{dfn:longsafe}) restricted to homogeneous types.


%%% The following commented code is only valid
%%% for homogeneous *LONG*-safety...
%%%
%%%%\subsection*{An alternative system of rules}
%%%%We say that $\Gamma \hentail M : A$ satisfies $P_i$ for $i \in \zset$ if
%%%%all the variables in $\Gamma$ have order at least $\ord{A}+i$.
%%%%
%%%%\begin{lemma}
%%%%\label{lem:prooftree01only} If $\Gamma \hentail M : T$ satisfies
%%%%$P_0$ or $P_1$ then there is a derivation for $\Gamma \hentail M : T$ such that all the judgments appearing in the proof tree satisfy either $P_0$ or $P_{-1}$.
%%%%\end{lemma}
%%%%\begin{proof}
%%%%We show by structural induction on the derivation tree of $\Gamma
%%%%\hentail M : T$ that there is exists a derivation in which all the sequents satisfy $P_0$ or $P_{-1}$:
%%%%\begin{asparaitem}
%%%%\item \rulenamet{const} The context is empty therefore the sequent satisfies $P_{-1}$.
%%%%
%%%%\item \rulenamet{var} The context contains only the variable itself therefore the sequent satisfies $P_0$.
%%%%
%%%%\item \rulenamet{wk} The premise is $\Delta \hentail M : T$ with $\Delta \subset \Gamma$. Since $\Gamma \hentail M : T$ satisfies $P_{-1}$ and $\Delta \subset \Gamma$ the premise must also satisfy $P_{-1}$. We conclude using the I.H.
%%%%
%%%%\item \rulenamet{perm} It follows from the I.H.
%%%%
%%%%\item \rulenamet{abs} The side-condition guarantees that the premise satisfies $P_{-1}$. The I.H.\ permits us to conclude.
%%%%
%%%%\item \rulenamet{app^+} The side-condition ensures that all the premises satisfy $P_0$. The I.H.\ permits us to conclude.
%%%%
%%%%\item \rulenamet{app} Let $T$ denote the type $\left(B_{11}, \ldots, B_{1l} \, | \, \overline{B_2} \, | \, \cdots \, | \, \overline{B_m} \, | \, o\right)$. Applying Lemma \ref{lem:homogsafe_basic_prop}(iii) to each of the premises of the rule gives $\freevarset(N_0) \hentail N_0 : T$ and for $1 \leq i \leq l$,  $\freevarset(N_i) \hentail N_i : B_{1i}$, which all satisfy $P_0$.
%%%%
%%%%Let $\Sigma = \Union_{i\in\{0..l\}} \freevarset(N_i)$.
%%%%Using the weakening rule we can form the sequent
%%%%$\freevarset(N_0) \hentail N_0 : T$. By  Lemma \ref{lem:homogsafe_basic_prop}(ii), the variables introduced that
%%%%way have order greater than the order of the $B_{1j}$ which is $\ord{N_0}-1$ because of type homogeneity. Thus the sequent satisfies $P_{-1}$. Similarly, we can form the sequents $\Sigma \hentail N_i : B_{1i}$ which necessarily satisfy $P_0$.
%%%%
%%%%We then have the derivation:
%%%%\begin{mathpar}
%%%%\inferrule* [Left=\rulenamet{wk}]
%%%%    {\inferrule* [Left=\rulenamet{app}]
%%%%        { \Sigma \hentail N_0 : T \qquad \Sigma \hentail N_1 : B_{11} \  \ldots \  \Sigma \hentail N_l : B_{1l} }
%%%%        {\Sigma \hentail N_0 N_1 \ldots N_l : B} }
%%%%    {\Gamma \hentail N_0 N_1 \ldots N_l : B}
%%%%\end{mathpar}
%%%%(The weakening rules is applied only if the inclusion $\Sigma \subseteq \Gamma$ is strict.) Applying the I.H.\ on the sequents lying at the top of this derivation tree permits us to conclude. \qedhere
%%%%\end{asparaitem}
%%%%% \end{proof}
%%%%
%%%%This observation allows us to refine the system of rules given in Def.~\ref{dfn:homogsafelmd} into the system of Table \ref{tab:homosafelmd_rules_refined}.
%%%%We use judgments of the form $\Gamma \hentail^0 M : T$
%%%%and $\Gamma \hentail^1 M : T$.
%%%%\begin{proposition}
%%%%Let $0 \leq j \leq 1$. The judgment $\Gamma \hentail M : A$ is derivable and satisfies $P_j$ if and only if $\freevarset(M) \hentail^j M : T$ is derivable with the rules of Table \ref{tab:homosafelmd_rules_refined}.
%%%%\end{proposition}
%%%%\begin{proof}
%%%%Because of Lemma \ref{lem:prooftree01only}, we know that the only necessary intermediate sequents are those that either satisfy $P_0$ or $P_{-1}$. Thus the rules of the homogeneous safe lambda calculus can be specialized as follows:
%%%%\begin{asparaitem}
%%%%\item The new rule \rulenamet{seq} expresses the fact that $P_0$ implies $P_{-1}$;
%%%%
%%%%\item The weakening rule is constrained so that it produces only sequent satisfying $P_0$ or $P_1$. Because of the context reduction lemma, any sequent satisfying $P_{-1}$ can be obtained by applying $\rulename{wk^{-1}}$ or $\rulename{seq}$ on some sequent satisfying $P_0$, therefore all the remaining rules need only to produce sequents satisfying $P_0$;
%%%%
%%%%\item The rules \rulenamet{perm}, \rulenamet{const} and \rulenamet{var} remain unchanged;
%%%%
%%%%\item \rulenamet{abs} The side-condition present in the original definition of the abstraction rule disappears as it is implied by the fact that the premise satisfies $P_{-1}$;
%%%%
%%%%\item \rulenamet{app} The fact that the first premise satisfies $P_{-1}$ implies that all the other premises satisfy $P_0$;
%%%%
%%%%\item \rulenamet{app^+} The side-condition in the original rule is equivalent as saying that the first premise satisfies
%%%%$P_0$. This in turn implies that the second premise also satisfies $P_0$.\qedhere
%%%%\end{asparaitem}
%%%%%% \end{proof}
%%%%
%%%%Hence, by Lemma \ref{lem:homogsafe_basic_prop}, a term is homogeneously safe if and only if the sequent $\freevarset(M) \hentail^0 M : T$ is derivable with the rules of Table \ref{tab:homosafelmd_rules_refined}.
%%%%
%%%%\begin{table}[htbp]
%%%%$$
%%%%\rulename{const} \  \rulef{}{\hentail^0 f : A}\ f:A \in \Sigma
%%%%\qquad
%%%% \rulename{var} \   \rulef{}{x : A\hentail^{0} x : A} $$
%%%%
%%%%$$  \rulename{perm} \
%%%%    \rulef{
%%%%      { \Gamma \hentail^0 M:B \qquad \sigma(\Gamma)  } \hbox{ homogeneous}
%%%%    }
%%%%    { \sigma(\Gamma) \hentail^0 M : B
%%%%    }
%%%%\qquad
%%%%\rulename{seq} \  \rulef{\Gamma \hentail^0 M : A}{\Gamma \hentail^{-1} M : A}
%%%%$$
%%%%
%%%%$$ \rulename{wk^{0}} \   \rulef{\Gamma \hentail^0 M : A}{\Gamma , x : B \hentail^0 M : A} \ \ \ord{B} \geq \ord{A}
%%%%\qquad \rulename{wk^{-1}} \   \rulef{\Gamma \hentail^{-1} M : A}{\Gamma , x : B \hentail^{-1} M : A} \ \ \ord{B} \geq \ord{A} -1$$
%%%%
%%%%
%%%%$$ \rulename{app} \
%%%%    \rulef
%%%%        {   \Gamma \hentail^{-1} N_0 : \left(B_{11}, \ldots, B_{1l} \, | \, \overline{B_2} \, | \, \cdots \, | \, \overline{B_m} \, | \, o\right)
%%%%            \quad
%%%%            \Gamma \hentail^0 N_1 : B_{11} \quad \ldots \quad \Gamma \hentail^0 N_{l} : B_{1l}
%%%%        }
%%%%        {
%%%%            \Gamma \hentail^0 N_0 N_1 \cdots N_{l} : \left( \overline{B_2} \, | \, \cdots \, | \, \overline{B_m} \, | \, o\right)
%%%%        }
%%%%$$
%%%%
%%%%$$ \rulename{app^+} \   \rulef{\Gamma \hentail^0 M : A\rightarrow B
%%%%                                        \qquad \Gamma \hentail^0 N : A
%%%%                                   }
%%%%                                   {\Gamma  \hentail^0 M N : B}$$
%%%%
%%%%$$ \rulename{abs} \   \rulef{\Gamma| \overline{x} : \overline{A} \hentail^{-1} M : B}
%%%%                                   {\Gamma  \hentail^0 \lambda \overline{x}^{\overline{A}} . M : (\overline{A}|B)}
%%%%\ \mbox{($\overline{x} : \overline{A}$ is the lowest type-partition of the context)}                                   $$
%%%%\caption{Alternative rules for the homogeneous safe lambda calculus.}
%%%%\label{tab:homosafelmd_rules_refined}
%%%%\end{table}
