Safety is a syntactic condition of higher-order grammars that
constrains occurrences of variables in the production rules
according to their type-theoretic order. The safe lambda
calculus is obtained by generalising the safety condition to
the setting of the simply-typed lambda calculus. In this
calculus there is no need to rename bound variables when
performing substitution, as variable capture is guaranteed not
to happen. In the same vein as Schwichtenberg's 1976
characterisation of the simply-typed lambda calculus, we show
that the numeric functions representable in the safe lambda
calculus are exactly the multivariate polynomials; thus
conditional is not definable. We then give a game-semantic
analysis of safety by showing that the game semantics of safe
lambda-terms are succinctly representable.
