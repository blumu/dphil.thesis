\frametitle {First order programs}
    \small

 \begin{columns}
   \column{7cm}
\textbf{Untyped functional language} recursion, if-then-else,
primitive operators, single data type
 \vspace{0.4cm}

\uncover<2->{
\textbf{Call-by-value evaluation semantics}: \\
$\begin{array}{ll}
\mathcal{E} \sem{\tt f} \vec{x} = v &  \mbox{{\tt f} evaluates to {\tt v} on input $\vec{x}$}, \\
\mathcal{E} \sem{\tt f} \vec{x} = \bot &  \mbox{{\tt f} does not terminate on input $\vec{x}$}.
  \end{array}
$
\vspace{0.4cm}
}

\uncover<3->{
\textbf{Exact call semantics}: a computation is described by a state transition sequence.
\vspace{0.6cm}
}
\uncover<4->{
\textbf{Finite approximation} of the call semantics: the control flow graph.
\vspace{0.4cm}
}

  \column{4.3cm}
\begin{block}{Example}
\begin{verbatim}
f(x) = gcd(x,18)
gcd(x,y) =
 if y == 0 then x
 else gcd(y, x mod y)
\end{verbatim}

\end{block}

\vspace{0.1cm}

\uncover<3->{
\begin{block}{}
 $f,4 \to gcd,(4,18) \to gcd,(18,2) \to gcd,(2,2) \to gcd,(2,0)$
\end{block}
\vspace{0.1cm}
}

\visible<4->{
\begin{block}{}
\begin{center} \includegraphics{flow0}
\end{center}
\end{block}
}
\end{columns}
