\NeedsTeXFormat{LaTeX2e}

\ProvidesClass{pstring}
          [2007/01/26]

\RequirePackage{pstricks}
\RequirePackage{pst-node}

\edef\TheAtCode{\the\catcode`\@}
\catcode`\@=11

% We define a new pstricks command: ncArc
% the difference with ncarc is that the parameter angle
% angleA (resp. angleB) gives the angle between the X axis
% and the tangent to the arrow at point A (resp B) whereas
% with ncarc then angle specifies instead
% the angle between the line (AB) and the tangent of the arrow 
% at A (or B).
%
% This kind of arc is not really usefull for graphs however it is easier to specify angles like this for links in justified sequences.
\def\ncArc{\pst@object{ncArc}}
\def\ncArc@i{\check@arrow{\ncArc@ii}}
\def\ncArc@ii#1#2{\nc@object{Open}{#1}{#2}{.5}{%
%yB yA sub xB xA sub \tx@Atan
  180 
\psk@arcangleA\space sub /AngleA ED
\psk@arcangleB\space %sub 180 add
/AngleB ED
\psk@ncurvB\space \psk@ncurvA\space
\tx@NCCurve}}



% Create a link using psttricks
\newcommand{\link}{\@ifstar
                     \linkStar%
                     \linkNoStar%
}
\newcommand{\linkNoStar}[2][nodesep=0pt]{\ncarc[linewidth=0.4pt,offset=-2pt,nodesep=0pt,arcangleA=-#2, arcangleB=-#2,#1]{->}}
% the starred version uses ncArc instead of ncarc.
\newcommand{\linkStar}[2][nodesep=0pt]{\ncArc[linewidth=0.4pt,offset=-2pt,nodesep=0pt,arcangleA=#2, arcangleB=#2,#1]{->}}

% Label the last link created
\newcommand{\lnklabel}{\@ifstar
                     \lnklabelStar%
                     \lnklabelNoStar%
}
\newcommand{\lnklabelStar}[1]{\mput*{\mbox{{\tiny $#1$}}}}
\newcommand{\lnklabelNoStar}[1]{\Bput[1pt]{\mbox{{\tiny $#1$}}}}





%\edef\OpenSqBrCode{\the\catcode`\[}
%\edef\CloseSqBrCode{\the\catcode`\]}
\begingroup
%\catcode`\@=11
%\catcode`&=\active
%\catcode`\[=\active
%\catcode`\]=\active
%\catcode`-=\active


\newbox\pstr@tempbox
\newdimen\pstr@tempdim

% create a new node together with a link
% #1 node name
% #2 link destination name
% #3 link arc angle 
% #4 node content
\gdef\newnode#1#2#3#4{%
\rnode{#1}{#4}% 
\edef\angle{#3}%
\ifx\angle\@empty\else\link*{\angle}{#1}{#2}\fi
}

%%%%%%%%%%%%%%%%
%% First way of creating a pointer string:
%  \Pstr[0.4cm]{ (b) this (a-b,45) that } 

% note the global \gdef
\gdef\Pstr{\@ifnextchar[{\@Pstr}{\@Pstr[0cm]}}
% pstr with optional parameter
\gdef\@Pstr[#1]#2{%
\begingroup
 \setlength\pstr@tempdim{#1}%
\setbox\pstr@tempbox\hbox\bgroup$%
\@@Pstr#2(@-@,@){}\@nil
 %\@@Pstr#2(@-@,@){@}\@nil\ignorespaces
$\egroup%
 \ht\pstr@tempbox\pstr@tempdim
 \box\pstr@tempbox
\endgroup
}
% #1 stuff to be typset in the pointer string
% #2 a new node definition
% #3 node content
\gdef\@@Pstr#1(#2)#3{%
 #1%dump the stuff
 \@@@Pstr#2-,#3\@nil
 \@ifnextchar\@nil{\@gobble}{\@@Pstr}%parse the rest
}
% parse the parameter for the creation of a node
\gdef\@@@Pstr#1-#2,{%
% create the node only if it is not the dummy node (@-@,@){@}
\if#1@
 \expandafter\pstr@skipdummynode
\else
\def\dest{#2}
\ifx\dest\@empty \pstr@skipdstangle{#1}%
  \else \aux{#1}{#2}
  \fi
\fi
}

\gdef\pstr@skipdummynode#1-,#2\@nil{}
\gdef\pstr@skipdstangle#1#2\@nil{ \rnode{#1}{#2} }
\gdef\aux#1#2#3-,#4\@nil{\newnode{#1}{#2}{#3}{#4}
}

%%%%%%%%%%%%%%%%
%%Second way of creating a pointer string
%  \pstr[0.4cm]{ \nd(b) this \lnk(a-b,45) that } 

\gdef\pstr{\@ifnextchar[{\@pstr}{\@pstr[0cm]}}
% pstr with optional parameter
\gdef\@pstr[#1]#2{%
\begingroup
 \setlength\pstr@tempdim{#1}%
 \setbox\pstr@tempbox\hbox{$#2$}%
 \ht\pstr@tempbox\pstr@tempdim
 \box\pstr@tempbox
\endgroup
}
\gdef\nd(#1){\rnode{#1}}
\gdef\lnk(#1-#2,#3)#4{\newnode{#1}{#2}{#3}{#4}}


\endgroup


\catcode`\@=\TheAtCode\relax
