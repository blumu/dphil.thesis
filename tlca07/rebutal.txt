-p15 References order should be alphabetical.

The Springer-LNCS bibtex style sorts references by order of
appearance in the text.

-p16 "the computation tree" -- is it fixed?

We forgot to mention at the beginning of Appendix A that we fix
a term Gamma |- M : T. "the computation tree" refers to the
computation tree of M.

-p16 In a hereditarily justified seq. there are no @'s but
traversals contain @'s.

We did not define the notion of "hereditarily justified
sequence". An occurrence of a node is hereditarily justified by
another node if we can reach the former from the latter by
following links in the justified sequence.

Traversals are well-defined justified sequence: variable and
lambda nodes different from the root all have pointers (an
@-node is not a variable node).

-p16 "dual notion of P-view" ?

In game semantics, the notions of O-view and P-view are dual.
They are defined identically except that the role of the
Opponent and the Proponent are exchanged. Here lambda-nodes
correspond to O-moves and variables-nodes and @-nodes
correspond to P-moves.

-p17 "the sequence that points to n"?

Read ", in the sequence, that points to n" instead.

-p17 Notion of traversal used before defined.

Read "justified sequence" instead.

-p17 Def. of traversal difficult to understand.

- Why is there an occurrence of the enabler in the O-view in
(Lam)?

This is justified a posteriori by the fact that the P-view (not
O-view) of a traversal ending with a lambda node is a path in
the computation tree going from the root to that lambda node.

- Why only one?

If n is a bound variable then its binding node occurs exactly
once in the path to the root. If it is a free variable then its
enabler is the root. If it is a @-node then it has no pointer.

- In (InputVar) isn't x the parent of n?

The arrow going from n to x in the rule definition is
misleading and should not appear there. x is not necessarily
the the parent of n. E.g. take the term \f . f (\x. x),
(InputVar) permits us to add the last node of the traversal \f
f \x x \x.

- Should "all node" be "all nodes"?

(InputVar) can be used for *any* node n verifying the required
conditions.

- Why is there an i-pointer in (Var) when n is a variable?

Variable nodes and @-nodes can both have several children. The
link label indicates the child number.

Suppose that n is a variable. Since in (Var) x_i is not
hereditarily justified by the root, the node \lambda
\overline{x} has necessarily been previously visited using
another instance of the (Var) rule. We can then prove by
induction on the rules that when (Var) is used, type(x_i) =
type (\lambda \overline{eta_i}). Thus since \lambda
\overline{x} was visited using (Var), we have type(n) =
type(\lambda \overline{x}). Consequently n has exactly
|\overline{x}| children nodes and therefore \lambda
\overline{\eta_i} does have a ith child.
