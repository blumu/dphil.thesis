This file was created with JabRef 2.0.
Encoding: Cp1252

@String{POPL =   "ACM Symposium on Principles of Programming Languages"}

@ARTICLE{hylandong_pcf,
  author = {J. M. E. Hyland and C.-H. L. Ong},
  title = {On full abstraction for {PCF}: {I, II, and III}},
  journal = {Inf. Comput.},
  year = {2000},
  volume = {163},
  pages = {285--408},
  number = {2},
  address = {Duluth, MN, USA},
  doi = {http://dx.doi.org/10.1006/inco.2000.2917},
  issn = {0890-5401},
  publisher = {Academic Press, Inc.}
}


@INPROCEEDINGS{abramsky:game-semantics,
  author = {Samson Abramsky and Guy McCusker},
  title = {Game Semantics},
  booktitle = {Proceedings of Marktorberdorf '97 Summerschool},
  year = {1997},
  note = {Lecture notes},
  library = {SCS-8},
  url = "citeseer.ist.psu.edu/abramsky99game.html"
}

@INPROCEEDINGS{abramsky94full,
  author = {Samson Abramsky and Pasquale Malacaria and Radha Jagadeesan},
  title = {Full Abstraction for {PCF}},
  booktitle = {Theoretical Aspects of Computer Software},
  year = {1994},
  pages = {1-15},
  url = {citeseer.ist.psu.edu/abramsky95full.html},
}

@article{scott93,
 author = {Dana S. Scott},
 title = {A type-theoretical alternative to ISWIM, CUCH, OWHY},
 journal = {Theor. Comput. Sci.},
 volume = {121},
 number = {1-2},
 year = {1993},
 issn = {0304-3975},
 pages = {411--440},
 doi = {http://dx.doi.org/10.1016/0304-3975(93)90095-B},
 publisher = {Elsevier Science Publishers Ltd.},
 address = {Essex, UK},
 }


@UNPUBLISHED{Ong2005,
  author = {C.-H. L. Ong},
  title = {Safe Lambda Calculus: Some Questions},
  note = {Note on the safe lambda calculus.},
  month = {December},
  year = {2005},
}


@inproceedings{KNU02,
    author={T.~Knapik and D.~Niwi{\'n}ski and P.~Urzyczyn},
    title={Higher-order pushdown trees are easy},
    booktitle={FOSSACS'02},
    publisher={Springer},
    note={LNCS Vol.~2303},
    pages={205-222},
    year=2002
}


@inproceedings{DBLP:conf/fossacs/AehligMO05,
  author    = {Klaus Aehlig and
               Jolie G. de Miranda and
               C.-H. Luke Ong},
  title     = {Safety Is not a Restriction at Level 2 for String Languages.},
  booktitle = {FoSSaCS},
  year      = {2005},
  pages     = {490-504},
  ee        = {http://springerlink.metapress.com/openurl.asp?genre=article{\&}issn=0302-9743{\&}volume=3441{\&}spage=490},
  crossref  = {DBLP:conf/fossacs/2005},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@proceedings{DBLP:conf/fossacs/2005,
  editor    = {Vladimiro Sassone},
  title     = {Foundations of Software Science and Computational Structures,
               8th International Conference, FOSSACS 2005, Held as Part
               of the Joint European Conferences on Theory and Practice
               of Software, ETAPS 2005, Edinburgh, UK, April 4-8, 2005,
               Proceedings},
  booktitle = {FoSSaCS},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {3441},
  year      = {2005},
  isbn      = {3-540-25388-2},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}


@inproceedings{DBLP:conf/sas/DimovskiGL05,
    author    = {Aleksandar Dimovski and
                Dan R. Ghica and
                Ranko Lazic},
    title     = {Data-Abstraction Refinement: A Game Semantic Approach.},
    booktitle = {SAS},
    year      = {2005},
    pages     = {102-117},
    ee        = {http://dx.doi.org/10.1007/11547662_9},
    crossref  = {DBLP:conf/sas/2005},
    bibsource = {DBLP, http://dblp.uni-trier.de}
}


@proceedings{DBLP:conf/sas/2005,
  editor    = {Chris Hankin and
               Igor Siveroni},
  title     = {Static Analysis, 12th International Symposium, SAS 2005,
               London, UK, September 7-9, 2005, Proceedings},
  booktitle = {SAS},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {3672},
  year      = {2005},
  isbn      = {3-540-28584-9},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}



%%%%%%%%%%%%%%% PCF

@InCollection{Reynolds81,
  Key =      "Reynolds",
  Author =   "John C. Reynolds",
  Title =    "The Essence of ALGOL",
  BookTitle =    "Algorithmic Languages",
  Publisher =    "IFIP, North-Holland",
  Address =  "Amsterdam",
  Year =     1981,
  Pages =    "345-372",
  Editor =   "J. W. de Bakker and J. C. van Vliet",
  Annote =   "Principles behind ALGOL. 29 references."
}



@article{DBLP:journals/tcs/Plotkin77,
  author    = {Gordon D. Plotkin},
  title     = {LCF Considered as a Programming Language.},
  journal   = {Theor. Comput. Sci.},
  volume    = {5},
  number    = {3},
  year      = {1977},
  pages     = {225-255},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}


@UNPUBLISHED{serenistypesct05,
  AUTHOR =       {Damien Sereni},
  TITLE =        {Simply typed $\lambda$-calculus and SCT},
  NOTE =         {},
  year =         {2005}
}



@InProceedings{jones01,
  AUTHOR       = {Lee, Chin Soon and Jones, Neil D. and Ben-Amram, Amir M.},
  YEAR         = {2001},
  TITLE        = {The Size-Change Principle for Program Termination},
  BOOKTITLE    = POPL,
  editor       = {},
  publisher    = {ACM press},
  organization = {},
  address      = {},
  series       = {},
  volume       = {28},
  pages        = {81--92},
  month        = {january},
  keywords     = {termination, program analysis, lexical order, pspace
hardness},
  summary = {The ``size-change termination''  principle for a first-order
functional language with well-founded data is: a program terminates on all
inputs if {\em every infinite call sequence} (following program control flow)
would cause an  infinite descent in some data values.
Size-change analysis is based only on local
approximations to parameter size changes derivable from program syntax.
The set of infinite call sequences that follow program flow and can be
recognized as causing infinite descent is an
$\omega$-regular set, representable by a B\"uchi automaton.
Algorithms for such automata can be used to decide size-change termination.
We also give a direct algorithm operating on ``size-change graphs''
(without the
passage to automata).
Compared to other results in the literature, termination analysis
based on the size-change principle is surprisingly simple and general:
lexical orders (also called lexicographic orders), indirect function
calls and permuted arguments (descent that is not {\em in-situ}) are
all handled {\em automatically and without special treatment}, with no
need for manually supplied argument orders, or theorem-proving methods
not certain to terminate at analysis time.
We establish the  problem's
{\em intrinsic complexity}. This turns out to be surprisingly high,
complete for {\sc pspace}, in spite of the simplicity of the principle.
{\sc pspace} hardness is proved by a reduction from Boolean program
termination. An interesting consequence: the same hardness result applies
to many other analyses found in the termination and quasi-termination
literature.},
  SEMNO        = {D-429},
  PUF          = {Artikel i proceedings (med censur)},
  ID           = {KonR},
  POSTSCRIPT   = {http://www.diku.dk/~neil/term.ps}
 }
